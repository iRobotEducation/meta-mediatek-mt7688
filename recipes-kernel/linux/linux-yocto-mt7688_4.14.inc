# linux-yocto-mt7688 kernel base inc file
#   May be machine specific files should not be in this file. This file
#   might have to be treated as a generic file for MT7688 HW based kernel
#   variant recipes
#
# FIXME:    some of the tasks for targeted/intended kernel package/recipe is
#           either overridden or prepended/appended in the include file which
#           in general is not suggested when these might differ between kernel
#           package variants
# TODO:     Please remove tasks from this file into kernel variant packages
#           appropriately when in conflict or change required

inherit kernel
inherit fitimage
require recipes-kernel/linux/linux-yocto.inc

LINUX_VERSION ?= "4.14"
#LINUX_PATCH ?= "95"
LINUX_PATCH ?= "115"
KBRANCH="v${LINUX_VERSION}.${LINUX_PATCH}"

# always assign KERNEL_DTB_NAME appropriately in the kernel recipes
# either softer or lazy assignment only leading to MACHINE value to be
# something else than the intended MACHINE name.
# This requires further inverstigation
KERNEL_DTB_NAME ??= "${MACHINE}"
FIT_IMAGE_DEF_SRC ?= "fit-image.its"
FIT_IMAGE ?= "fitImage"
KERNEL_UIMAGE ?= "uImage"
LINUX_VERSION_EXTENSION_append ?= "-custom"

# Original openwrt commit (forked from): c5ca1c9ab65bfe1e6fc74230f8c0121230562b1c

# Override SRC_URI in a copy of this recipe to point at a different source
# tree if you do not want to build from Linus' tree.
SRC_URI = "git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git;protocol=git;nobranch=1;rev=1c046f37313210e0c41b036fcd14c4bdb1581d47"

# moving defconfig file into kernel recipes for SRC_URI append (_append or +=)
# causing configuration issues. Should be investigated further.
# for now leave it as a mandatory defconfig
SRC_URI += "file://${KBRANCH}/defconfig \
            file://mt7688.scc \
            file://mt7688.cfg \
            file://mt7688-standard.scc \
            file://irobot-user-config.cfg \
            ${@oe.utils.conditional('BUILD_TYPE', "profile", "file://irobot-profile.cfg", "", d)} \
            ${@oe.utils.conditional('BUILD_TYPE', "release", "", "file://irobot-debug.cfg ", d)} \
            file://${KBRANCH}/backport/openwrt-backport-patches.scc \
            file://${KBRANCH}/pending/openwrt-pending-patches.scc \
            file://${KBRANCH}/hack/openwrt-hack-patches.scc \
            file://${KBRANCH}/ramips/openwrt-ramips-patches.scc \
            file://${KBRANCH}/daredevil/daredevil-patches.scc \
            file://${KBRANCH}/${FIT_IMAGE_DEF_SRC} \
           "

SRC_URI += "file://openwrt_files/target/linux-${KBRANCH}/generic/files"
SRC_URI += "file://openwrt_files/target/linux-${KBRANCH}/ramips/files"
SRC_URI += "file://openwrt_files/target/linux-${KBRANCH}/ramips/dts"

PV = "${LINUX_VERSION}+git${SRCPV}"

KERNEL_VERSION_SANITY_SKIP="1"

FILESEXTRAPATHS_prepend:="${THISDIR}/openwrt_files:"

DEPENDS+="image-patch-native xz-native openwrt-lzma-native"

# soft set COMPATIBLE_MACHINE to make sure a kernel recipe included this inc
# file is compatible with machines known to be working unless overwritten
# when PREFERRED_PROVIDER_virtual/kernel is set to regular kernel recipe in
# machine conf file
COMPATIBLE_MACHINE ?= "(linkit7688|showboat|sundial)"

do_patch_prepend() {
    cp -r openwrt_files/target/linux-${KBRANCH}/generic/files/* ${S}
    cp -r openwrt_files/target/linux-${KBRANCH}/ramips/files/* ${S}
    cp -r openwrt_files/target/linux-${KBRANCH}/ramips/dts/* ${S}/arch/mips/boot/dts/ralink
}

do_configure_prepend() {
    rm -rf {B}/.config
}

do_compile_append () {
    cd ${B}
    make dtbs
}

# Do this prior to deploying so we get the latest version of vmlinux.initramfs (which is generated by
# do_bundle_initramfs in kernel.bbclass).  Or, better yet, learn how to specify the initramfs via the FIT
# image and don't require us to link the kernel twice.
VMLINUX="${@oe.utils.conditional('INITRAMFS_IMAGE_BUNDLE', '1', 'vmlinux.initramfs', 'vmlinux', d)}"
do_deploy_prepend() {
    cd ${B}
    ${OBJCOPY} -O binary -R .reginfo -R .notes -R .note -R .comment -R .mdebug -R .note.gnu.build-id -S ${VMLINUX} vmlinux.bin
    openwrt-lzma e vmlinux.bin -lc1 -lp2 -pb2 vmlinux.bin.lzma
}

kernel_do_deploy_append() {
    deploy_fitimage_assets
}

# Disabling stripping.
# Allows kernel modules recompile. Vmlinux cannot be stripped for that.
do_strip() {
}
